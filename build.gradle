plugins {
    id 'base'
}

repositories {
    maven {
        url "https://maven.pkg.github.com/hiconic-os/maven-repo-dev"
        credentials {
            username 'not-needed'
            password System.getenv('GITHUB_READ_PACKAGES_TOKEN')
        }
    }
}

configurations {
    devrockSdk {
        transitive = false
    }
    hiconicSdk {
        transitive = false
    }
}

dependencies {
    devrockSdk 'tribefire.extension.setup:devrock-sdk:2.1.+@zip'
    hiconicSdk 'tribefire.extension.setup:hiconic-sdk:2.1.+@zip'
}

task downloadDevrockSdk(type: Copy) {
    from configurations.devrockSdk
    into "build"
    rename { fileName -> "devrock-sdk.zip" }
}

task downloadHiconicSdk(type: Copy) {
    from configurations.hiconicSdk
    into "build"
    rename { fileName -> "hiconic-sdk.zip" }
}

task buildBaseImage(type: Exec) {
    def branch = project.hasProperty("branch") ? project.branch : "main";
    commandLine ('docker', 'build', 
        "-t", "ghcr.io/hiconic-os/ci-base/${branch}:latest",
        "-f", "Dockerfile-base",
        "."
    )
}

task buildDevrockImage(type: Exec) {
    def branch = project.hasProperty("branch") ? project.branch : "main";
    commandLine ('docker', 'build', 
        "--build-arg", "GITHUB_READ_PACKAGES_TOKEN=${System.getenv('GITHUB_READ_PACKAGES_TOKEN')}",
        "-t", "ghcr.io/hiconic-os/ci-devrock-sdk/${branch}:latest",
        "-f", "Dockerfile-devrock-sdk",
        "."
    )
}

task buildHiconicImage(type: Exec) {
    def branch = project.hasProperty("branch") ? project.branch : "main";
    commandLine ('docker', 'build', 
        "-t", "ghcr.io/hiconic-os/ci-hiconic-sdk/${branch}:latest",
        "-f", "Dockerfile-hiconic-sdk",
        "."
    )
}

task buildAll(type: GradleBuild) {
    tasks = ['downloadHiconicSdk', 'buildBaseImage', 'buildHiconicImage']
}
